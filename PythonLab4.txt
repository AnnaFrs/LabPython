import random
import datetime
import prettytable                  # пакет для таблицы
import matplotlib.pyplot as plt     # библиотека для графика

def BubbleSort(A):                  # сортировка пузырьком
    for i in range(len(A)):
        for j in range(len(A)-1-i):
            if A[j] > A[j+1]:
                a = A[j]
                A[j] = A[j+1]
                A[j+1] = a


def QuickSort(A, fst, lst):         # быстрая сортировка
    if fst >= lst:
        return

    i, j = fst, lst
    pivot = A[fst]
    pivot = A[random.randint(fst, lst)]
    first_bigger = fst+1
    while first_bigger <= lst:
        if A[first_bigger] >= pivot:
            break
        first_bigger += 1
    i = first_bigger+1
    while i <= lst:
        if A[i] < pivot:
            A[i], A[first_bigger] = A[first_bigger], A[i]
            first_bigger += 1
        i += 1

    last_smaller = first_bigger-1
    A[fst], A[last_smaller] = A[last_smaller], A[fst]
    QuickSort(A, fst, last_smaller-1)
    QuickSort(A, first_bigger, lst)


#Функция сортировки вставками insert:
def InsertionSort(A):
    for i in range(1, len(A)):
        t = A[i]
        j = i-1
        while j >= 0 and t < A[j]:
            A[j+1] = A[j]
            j -= 1
        A[j+1] = t


#Функция шейкерной (коктейльной) сортировки shaker - модификации пузырьковой:
def ShakerSort(A):
    n = len(A)
    for i in range(n // 2):
        for j in range(i, n-1-i):
            if A[j] > A[j+1]:
                A[j], A[j+1] = A[j+1], A[j]
        for j in range(n-2-i, 1, -1):
            if A[j] < A[j-1]:
                A[j], A[j-1] = A[j-1], A[j]




table = prettytable.PrettyTable(["Размер списка", "Время пузырька", "Время быстрой", "Время вставками", "Время коктейльной"])
x=[]
y1=[]
y2=[]
y3=[]
y4=[]



for N in range(1000,5001,1000):
    x.append(N)
    min=1
    max=N
    A=[random.randint(min,max) for _ in range(N)]


    #print(A)

    A = A.copy()
    B = A.copy()
    C = A.copy()
    D = A.copy()

    #print(B)

    #BubbleSort(A)
    #print("---")
    #print(A)



    #QuickSort(B, 0, len(B)-1)
    print("---")
    #print(B)

    t1 = datetime.datetime.now()
    BubbleSort(A)
    t2 = datetime.datetime.now()
    y1.append((t2-t1).total_seconds())
    print("Пузырьковая сортировка   " +str(N)+"   заняла   "+str((t2-t1).total_seconds()) + "c")

    t3 = datetime.datetime.now()
    QuickSort(B, 0, len(B)-1)
    t4 = datetime.datetime.now()
    y2.append((t4 - t3).total_seconds())
    print("Быстрая сортировка   " +str(N)+"   заняла   "+str((t4-t3).total_seconds()) + "c")

    t5 = datetime.datetime.now()
    InsertionSort(C)
    t6 = datetime.datetime.now()
    y3.append((t6 - t5).total_seconds())
    print("Вставкой сортировка   " + str(N) + "   заняла   " + str((t6 - t5).total_seconds()) + "c")

    t7 = datetime.datetime.now()
    ShakerSort(D)
    t8 = datetime.datetime.now()
    y4.append((t8 - t7).total_seconds())
    print("Шейкерная сортировка   " + str(N) + "   заняла   " + str((t8 - t7).total_seconds()) + "c")


    #table.add_row([str(N), str((t2-t1).total_seconds()), str((t4-t3).total_seconds())])
#print(table)


#plt.plot(x, y1, "C0")
#plt.plot(x, y2, "C1")

#plt.show()


plt.plot(x, y1, "C0", marker = 'p', label = "BubbleSort")
plt.plot(x, y2, "C1", marker = 'p', label = "QuickSort")
plt.plot(x, y3, "C2", marker = 'p', label = "InsertionSort")
plt.plot(x, y4, "C3", marker = 'p', label = "ShakerSort")

font1 = {'family':'serif','color':'blue','size':20}
font2 = {'family':'serif','color':'darkred','size':15}
plt.title("Sort execution time", fontdict = font1)
plt.xlabel("List size", fontdict = font2)
plt.ylabel("Time", fontdict = font2)
plt.grid(True)
plt.legend()
plt.show()



width = 180
plt.bar([p-width for p in x], y1, width = width, label = "BubbleSort", color = "mediumslateblue")
plt.bar(x, y2, width = width, label = "QuickSort", color = "darkorange")
plt.bar([p+width for p in x], y3, width = width, label = "InsertionSort", color = "springgreen")
plt.bar([p+2*width for p in x], y4, width = width, label = "ShakerSort", color = "crimson")

font3 = {'family':'serif','color':'blue','size':20}
font4 = {'family':'serif','color':'darkred','size':15}
plt.title("Sort execution time", fontdict = font3)
plt.xlabel("List size", fontdict = font4)
plt.ylabel("Time", fontdict = font4)
plt.grid(True)
plt.legend()
plt.show()



font5 = {'family':'serif','color':'blue','size':10}
font6 = {'family':'serif','color':'darkred','size':8}

plt.subplot(2, 2, 1)
plt.plot(x, y1, "C0", marker = 'p', label = "BubbleSort")
plt.title("BubbleSort", fontdict = font5)
plt.xlabel("List size", fontdict = font6)
plt.ylabel("Time", fontdict = font6)

plt.subplot(2, 2, 2)
plt.plot(x, y2, "C1", marker = 'p', label = "QuickSort")
plt.title("QuickSort", fontdict = font5)
plt.xlabel("List size", fontdict = font6)
plt.ylabel("Time", fontdict = font6)

plt.subplot(2, 2, 3)
plt.plot(x, y3, "C2", marker = 'p', label = "InsertionSort")
plt.title("InsertionSort", fontdict = font5)
plt.xlabel("List size", fontdict = font6)
plt.ylabel("Time", fontdict = font6)

plt.subplot(2, 2, 4)
plt.plot(x, y4, "C3", marker = 'p', label = "ShakerSort")
plt.title("ShakerSort", fontdict = font5)
plt.xlabel("List size", fontdict = font6)
plt.ylabel("Time", fontdict = font6)

plt.tight_layout()
plt.show()


#1.Написать алгоритмы сортировок insert и shaker по псевдокоду
#2.Вставить их в код выше, вывести время выполнения сортировки(как для пузырька и быстрой сортирововок) и добавить результат в график
#3.Добавьте заголовок графика и подписи для осей
#4.Создайте точечный график для сортировок
#5.Создайте BarPlot для сортировок
#6.Разделите сортировки на отдельные графики








